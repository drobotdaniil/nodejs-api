{"version":3,"sources":["components/FormGetById/FormGetById.js","components/FormAdd/FormAdd.js","components/Task/Task.js","components/DBTasksContainer/DBTasksContainer.js","components/ClientTasksContainer/ClientTasksContainer.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["FormBlock","props","onSubmit","getTaskById","className","type","onChange","handleInput","placeholder","addTask","name","handleInputTitle","required","handleInputDesc","Task","title","id","description","onClick","handleDelete","DBTasksContainer","tasks","map","task","key","deleteTask","ClientTasksContainer","saveTasks","uuidv4","require","v4","Content","useState","tasksCL","setTasksCL","tasksDB","setTasksDB","setValue","setTitle","desc","setDesc","e","a","preventDefault","fetch","response","ok","Error","json","result","message","then","resp","data","catch","err","FormGetById","target","value","FormAdd","arr","push","length","filtered","filter","method","body","JSON","stringify","res","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.dee2c080.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst FormBlock = props => {\r\n  return (\r\n    <form onSubmit={props.getTaskById} className='form'>\r\n      <input type='text' onChange={props.handleInput} className='form__input' placeholder='Write id here...' />\r\n      <button className='form__btn btn'>Get Task By ID</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default FormBlock","import React from 'react'\r\n\r\nconst FormBlock = props => {\r\n  return (\r\n    <form onSubmit={props.addTask} className='form form--add'>\r\n      <input type='text' name='title' onChange={props.handleInputTitle} className='form__input' placeholder='Write title here...' required />\r\n      <input type='text' name='description' onChange={props.handleInputDesc} className='form__input' placeholder='Write description here...' required />\r\n      <button className='form__btn btn'>Add task</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default FormBlock","import React from 'react'\r\n\r\nconst Task = props => {\r\n  return (\r\n    <div className='task'>\r\n      <h3>{props.title}</h3>\r\n      <p>{props.id}</p>\r\n      <p>{props.description}</p>\r\n      <button className='btn btn--delete' id={props.id} onClick={props.handleDelete}>Delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Task","import React from 'react'\r\nimport Task from '../Task/Task'\r\n\r\nconst DBTasksContainer = props => {\r\n  return (\r\n    <div className='tasks'>\r\n      <h1>DB tasks: </h1>\r\n      {props.tasks.map(task => {\r\n        return (\r\n          <Task \r\n          key={task.id}\r\n          id={task.id}\r\n          title={task.title}\r\n          description={task.description}\r\n          handleDelete={props.deleteTask}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DBTasksContainer","import React from 'react'\r\nimport Task from '../Task/Task'\r\n\r\nconst ClientTasksContainer = props => {\r\n  return (\r\n    <div className='tasks'>\r\n      <h1>Client tasks: </h1>\r\n      {props.tasks.map(task => {\r\n        return (\r\n          <Task \r\n          key={task.id}\r\n          id={task.id}\r\n          title={task.title}\r\n          description={task.description}\r\n          handleDelete={props.deleteTask}\r\n          />\r\n        )\r\n      })}\r\n      <button onClick={props.saveTasks}>Save Task(s)</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClientTasksContainer","import React, { useState} from 'react'\r\nimport FormGetById from '../FormGetById/FormGetById'\r\nimport FormAdd from '../FormAdd/FormAdd'\r\nimport DBTasksContainer from '../DBTasksContainer/DBTasksContainer'\r\nimport ClientTasksContainer from '../ClientTasksContainer/ClientTasksContainer'\r\nconst { v4: uuidv4 } = require('uuid')\r\n\r\nconst Content = () => {\r\n  const [tasksCL, setTasksCL] = useState([])\r\n  const [tasksDB, setTasksDB] = useState([])\r\n  const [id, setValue] = useState('')\r\n  const [title, setTitle] = useState('')\r\n  const [desc, setDesc] = useState('')\r\n\r\n  const handleInputIdx = e => {\r\n    setValue(e.target.value)\r\n  }\r\n\r\n  const handleInputTitle = e => {\r\n    setTitle(e.target.value)\r\n  }\r\n\r\n  const handleInputDesc = e => {\r\n    setDesc(e.target.value)\r\n  }\r\n\r\n  const getTasks = e => {\r\n    e.preventDefault()\r\n\r\n    fetch(`http://localhost:3000/api/tasks`)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        setTasksDB(data)\r\n      })\r\n      .catch(err => {\r\n        throw err\r\n    })\r\n  }\r\n\r\n  const getTaskById = async e => {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/api/tasks?id=${id}`)\r\n      if (!response.ok) {\r\n        throw new Error('Ответ сети был не ok.')\r\n      }\r\n      const result = await response.json()\r\n      setTasksDB(result)\r\n    } catch (error) {\r\n      throw ('Возникла проблема с вашим fetch запросом: ', error.message)\r\n    }\r\n  }\r\n\r\n  const deleteTaskDB = e => {\r\n    const id = e.target.id\r\n\r\n    fetch(`http://localhost:3000/api/delete?id=${id}`,\r\n      {\r\n        method: 'DELETE'\r\n      }\r\n    )\r\n    .then(resp => resp.json())\r\n    .then(data => {\r\n      setTasksDB(data)\r\n    })\r\n  }\r\n\r\n  const deleteTaskCL = e => {\r\n    const id = e.target.id\r\n    const arr = [...tasksCL]\r\n\r\n    const filtered = arr.filter(task => task.id !== id)\r\n\r\n    setTasksCL(filtered)\r\n  }\r\n\r\n  const saveTasks = () => {\r\n    fetch(`http://localhost:3000/api/save`,\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify(tasksCL), \r\n    })\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      setTasksDB(data)\r\n      setTasksCL([])\r\n    })\r\n  }\r\n\r\n  const addTask = e => {\r\n    e.preventDefault()\r\n    \r\n    const arr = [...tasksCL]\r\n    arr.push({id: uuidv4(), title: title, description: desc})\r\n\r\n    setTasksCL(arr)\r\n  }\r\n\r\n  return (\r\n    <div className='wrapper'>\r\n      \r\n      <button className='btn' onClick={getTasks}>Get All Tasks</button>\r\n      <FormGetById handleInput={handleInputIdx} getTaskById={getTaskById}/>\r\n      <FormAdd addTask={addTask} handleInputTitle={handleInputTitle} handleInputDesc={handleInputDesc}/>\r\n      <div className='tasks-wrapper'>\r\n        {tasksCL.length ? <ClientTasksContainer tasks={tasksCL} deleteTask={deleteTaskCL} saveTasks={saveTasks} /> : ''}\r\n        {tasksDB.length ? <DBTasksContainer tasks={tasksDB} deleteTask={deleteTaskDB}/> : ''}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content","import React from 'react';\nimport Content from './components/Content/Content';\n\n\nfunction App() {\n  return (\n    <Content />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}